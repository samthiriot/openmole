

@import org.openmole.site.stylesheet._
@import org.openmole.site._
@import org.openmole.site.tools._


@def variables = """
val density = Val[Double]
val seed = Val[Int]
val burned = Val[Double]
"""

@h1{Simple Sensitivity Analysis with the NetLogo Fire Model}

@h2
    Sensitivity analysis

Typical Sensitivity analysis (in a simulation experiment  context) is the study of how the variation of an input
affect the output(s) of a model. Basically it

@img(src := Resource.img.method.sensitivityAnim.file, stylesheet.center(80))

@basicButton("Run", classIs(btn ++ btn_danger))(id := shared.sensitivity.button, stylesheet.svgRunButton(10))

@break

@h3{Prerequisites}

An embedded model in OpenMOLE (see Step 1 : Model)



@h2
    Variation of one input

The most simple case to consider is to observe the effect of a single input variation on a single output.

This is achieved by using an @b{exploration task} , who will generate the sequence of values of an input, according to its
boundaries values and a discretisation step.

@br

   @hl.openmole("""
val my_input = Val[Double]

val exploration =
 ExplorationTask(
   (my_input in (0.0 to 10.0 by 0.5))
  )""", name = "variation of 1 input in sensitivity")


@h2
    Real world example

the @hl.highlight("Fire.nlogo", "plain") model is a simple, one-parameter, simulation model that simulates fire propagation.
This model features a threshold value in its unique parameter domain, below which fire fails to burn the majority
of the forest, and beyond which fire propagates and burn most of it.
We will perform sensitivity analysis to make this change of regime appear.

The Fire model integration has been covered in the @a("NetLogo page of the Model section", href:= DocumentationPages.netLogo.file), so we take it from here.

The former script was already performing a sensitivity Analysis, by varying density from 20 to 80 by step of 10, with 10 replication for each (seed is taken 10 times).
@br
In our case, the quantum of 10 percent is quite coarsed, so we make it 1 percent :

@hl.openmole("""
val exploration =
  ExplorationTask(
    (density in (20.0 to 80.0 by 1.0)) x
    (seed in (UniformDistribution[Int]() take 10))
  )
  """, header=variables)
@break
This is the resulting scatterplot of Number of burned trees according to density varying from 20% to 80% by 1% steps.
@br@br
@img(src := Resource.img.method.densityBurned.file, stylesheet.center(80))

@br
The change of regime clearly appears between 50% and 75% percent density, so we are going to take a closer look at this domain: we change the exploration task to have the density taken from 50% to 75% by step of 0.1%, still with 10 replications:
@br
@hl.openmole("""
    val exploration =
      ExplorationTask(
        (density in (50.0 to 75.0 by 0.1)) x
        (seed in (UniformDistribution[Int]() take 10))
      )
      """, header=variables)

@break

This gives us the following scatter plot, where we added an "estimator" (or predictor)  curve (geom_smooth() from @a("ggplot2 R library", href:=shared.link.ggplot2) to be precise) that acts like a floating estimator in the collection of points, giving the statistical tendency of the Y-Axis values of points along the X-axis.

@br@br
@img(src := org.openmole.site.Resource.img.method.densityBurnedZoom.file, stylesheet.center(80))

@br


That's pretty cool already ! The estimator gives us a nice sigmo√Ød shape on which we could find the mid point, the steepness of the curve and so on, to better characterize the phenomenon.
@break
Eventually, let's have a look at the stochasticity of the model. Looking at the plot, we see that there is a lot of variation possible, especially in the transition zone,  around 60% density.
Let's make a final exploration Task to investigate the variation of model outputs for several replications of the same parameterization.
We now take densities within [50;70] and take 100 replications for each:


@hl.openmole("""
     val exploration =
       ExplorationTask(
         (density in (50.0 to 70.0 by 0.1)) x
         (seed in (UniformDistribution[Int]() take 100))
       )""", header= variables)




@br

We obtain the following results, displayed as boxplots every percent (but results are obtained for every 0.1% density) to emphasize on the variations.


@br@br

@img(src := Resource.img.method.densitySeedBox.file, stylesheet.center(80))


@br
As we can see, stochasticity has an high effect right in the middle of the transition of regime, reaching maximum at 54%.
Another interesting thing to investigate what would be the density from which the fire propagates to the end of the zone (right side of NetLogo World). A slight modification of the model code would do the trick (hint:
@hl.highlight("any? patches with-max [pxcor] ... ","plain") would be a good starting point :-) but we let you do it on your own (any successful attempt would win the right to be displayed right here ! )


@p
For completeness sake, here is the R code snippet to produce plots from your results file (RSutdio version 1.0.153, ggplot2 version 2.2.1)


@hl.highlight("""
    library(ggplot2)
    setwd("~/dev/DocOpenMoleSensitivity/")

    df <- read.csv("result.csv")
    dfzoom <- read.csv("resultZoom.csv")
    dfzoomSeed <- read.csv("resultZoomSeed.csv")


    #scatterplot
    p <- ggplot(df, aes(x=density, y=burned)) +
           geom_point(colour="#4096c5") +
      ggtitle("Burned trees according to initial Density, with predictor curve and booxplots")+
      ylab("burned trees")+
      theme(panel.background = element_rect(fill = "grey90"))
    p

    #scatter + estimator
    pp <- ggplot(dfzoom, aes(x=density, y=burned)) +
      geom_point(colour="#4096c5") +
      geom_smooth(colour="#ff5900")+
      ggtitle("Burned trees according to initial Density, with predictor curve and booxplots")+
      ylab("burned trees")+
      theme(panel.background = element_rect(fill = "grey90"))
    pp

    #boxplot every percent
    ppp <- ggplot(dfzoomSeed, aes(x=density, y=burned, group=density)) +
      geom_boxplot((aes(group = cut_width(density, 1))), outlier.alpha=0.2,colour="#4096c5", outlier.color = "#ff5900")+
      ggtitle("Stochasticity : Boxplots every percent")+
      ylab("burned trees")+
      scale_x_continuous(breaks=seq(50,70,5), minor_breaks = seq(50,70,1))+
      theme(panel.background = element_rect(fill = "grey90"))
    ppp
""","R")







