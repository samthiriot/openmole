
@import org.openmole.site.tools._
@import org.openmole.site._
@import org.openmole.site.stylesheet._

OpenMOLE built-in methods are designed to explore your model and answer several questions regarding @b{optimization,
sensitivity, robustness and diversity} of your model capabilities

@def model = """
  val x = Val[Double]
  val y = Val[Double]

  val o1 = Val[Double]
  val o2 = Val[Double]

  val model =
    ScalaTask("val o1 = x; val o2 = y") set (
      inputs += (x, y),
      outputs += (o1, o2)
    )
"""



@h2{Context}
Simulation models can be abstracted as a program that transforms a set of @b{inputs} into a set of @b{outputs}.
@br

    @img(src := Resource.img.method.modelIO.file, center(80))
    Even though any type of data can be used as inputs for simulation models  (parameters , pictures, CSV files, DB connections, etc.),
    simulation experiments revolves mostly around @b{parameters space exploration} (e.g. sensitivity analysis).
    Likewise, considered outputs in simulation experiments are most of times @b{measures} computed on the dynamics produced by a simulation run  (e.g. fitness or error functions)

@h2{Questioning your model}
There are four types of general questions that can be addressed by OpenMOLE methods.

@br

@ol
    @li{What are all the possible inputs producing a given output ?} @br
    @li{What is the effect of an input variation on the output ?} @br
    @li{How do the inputs participate to produce the outputs ? @br Are every parameter compulsory to produce outputs ?
    @br What are the robustness intervals of the inputs that lead to a desired output ?} @br
    @li{What are the possible outputs of the model ?}

@br
Question 1 is referred as a @b{calibration} or @b{optimization problem} and solved via Genetic Algorithms.
@br
Question 2 is addressed by performing a @b{sensitivity analysis} via custom Exploration tasks.
@br
Question 3 is addressed using @b{Calibration Profiles Algorithm}, that extends the results of a sensitivity analysis.
@br
Question 4 is addressed by using the @b{Pattern Space Exploration} (PSE) method.

@p



Calibration methods make an extensive use of @a("Genetic Algorithms", href := DocumentationPages.geneticAlgorithm.file).
@br
Specific task are available to handle the @a("stochasticity ", href := DocumentationPages.stochasticityManagement.file) of your
model
as well as @a("distribution schemes", href := DocumentationPages.island.file) specifically designed for distributed computing environment.


@h2{Methods characteristics}
Each of OpenMOLE methods comes with an image summarizing the performance and  characteristics regarding criterion they have in common e.g. coverage rate of input/out of sensitivity to dimensionality.
@break

@Resource.rawFrag(Resource.img.method.legendOfIDs)

@break

These performance scores are defined relatively to each other and are not absolute values.
