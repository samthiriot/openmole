@import org.openmole.site.tools._
@import org.openmole.{site=> site}
@import org.openmole.site.stylesheet._
@import site._

@def variables = """
  val density = Val[Double]
  val seed = Val[Int]
  val burned = Val[Double]"""

@def exploration = """
  val sampling =
    (density in (20.0 to 80.0 by 10.0)) x
    (seed in (UniformDistribution[Int]() take 10))"""

@def netlogo = """
  val cmds = List(
    "random-seed ${seed}",
    "setup",
    "while [any? turtles] [go]")

  val fireTask =
    NetLogo6Task(workDirectory / "Fire.nlogo", cmds) set (
      inputs += seed,
      inputs += density mapped "density",
      outputs += (density, seed),
      outputs += burned mapped "burned-trees"
    )"""

@def csvHook = """
  val csvHook = AppendToCSVFileHook(workDirectory / "result.csv", density, burned, seed)"""




@h2{NetLogo Task}

@p NetLogo is a widely used Agent-based Modeling platform and language developed by CCL at Northwestern University (see @aa("the official website", href:= "https://ccl.northwestern.edu/netlogo/")).
    It is conceived to be accessible to non-programmers and thus enhance inter-disciplinarity in the construction of simulation models, but can also be used for large scale complex models (despite its bad reputation, see @aa("this paper", href := "http://jasss.soc.surrey.ac.uk/20/1/3.html") testing netlogo speed performance and suggesting code improvements).
    As it runs on the JVM, it is naturally integrated into OpenMOLE.

@p OpenMOLE provides a
     NetLogoTask that expects the following parameters definitions:
    @ul
      @li{the path where to find the NetLogo model, i.e. the nlogo source file,}
      @li{the list of NetLogo commands that OpenMOLE needs to run}
    @p The NetlogoTask comes in two versions : @code{Netlogo5Task} and @code{Netlogo6Task}, be sure to select
    the right version of the task according to the version of Netlogo you used, 5 or 6 .

    @p A task is written the following way, here for a model file @code{Fire.nlogo}.

    @br @hl.openmole(netlogo, header =
    s"""
    $variables
    $exploration
    """, name = "netlogo task")

    @p In this example, the commands list contains:
        @ul
          @li{@code{random-seed} that initialises the random number generator of NetLogo using the seed provided by OpenMOLE,}
          @li{@code{setup} that calls the setup function of the netlogo file to initialise the model,}
          @li{@code{go}, a function that runs the model. For this particular model, this function is called until no more turtle are active.}

    @p The @code{replication} and the @code{density} OpenMOLE variables are used as parameters of the NetLogo program.
    Therefore they appear as inputs of the NetLogoTask.

    @p Similarly, 1 output of the model is considered and collected by OpenMOLE at the end of each model execution.
    It is written as @code{netLogoOutputs} in the definition of the task.

    @br@br
    @img(src := Resource.img.model.netlogoMapping.file, center(100))
    @br

    @p The arguments for a NetLogoTask are the following :
    @ul
      @li{@code{script} netlogo model (File), mandatory}
      @li{@code{launchingCommands} netlogo commands to be executed, mandatory}
      @li{@code{embedWorkspace} should the workspace be embedded for execution of the model (use if you have source files or extensions in the model directory), optional, defaults to false}
      @li{@code{reuseWorkspace} should the same workspace be reused when executing on a given jvm (use to avoid MetaSpace errors with large netlogo models loading several extensions when executed a large number of times on the same jvm), optional, defaults to false}
      @li{@code{seed} random seed, optional, defaults to None}

    @p The properties to be adjusted with @code{set} :
    @ul
      @li{@code{inputs/outputs} similar as for any task}
      @li{mapped input: the syntax @code{inputs += prototype mapped "netlogo-variable"} establishes a link between the workflow variable @code{prototype} (Val) and the corresponding netlogo variable name @code{"netlogo-variable"} (String)
      If the variables have the same name, you can use the shorter syntax @code{inputs += prototype.mapped}}
      @li{mapped output: similar syntax to collect outputs of the model (the string can be any NetLogo command)}

    @p The former mapping syntax using @code{netLogoInputs} and @code{netLogoOutputs} is deprecated, but still works until further notice for compatibility reasons.

@h2{Embedding NetLogo extensions and sources}

@p Several NetLogo models relies on extensions (which are basically jars providing new primitives in interaction with the NetLogo workspace).
By default, NetLogo will search extensions in its installation folder (what will not work as OpenMole embeds NetLogo as a jar), but also in the model directory.
To be able to run a model with extensions, put the extension folder in the same directory as the model source, and activate the option @i{embedWorkspace}.

@p It goes the same for all additional source files (@code{.nls} generally used for large models) or configuration files.



@h2{An example of NetLogo model exploration}


We now present step by step how to explore a NetLogo model. @a("The Fire model", href := Resource.script.fireNLogo.file) is a
common NetLogo example available in the NetLogo common model library.
It studies the percolation of a fire in a forest depending on the density of the forest. This model has one input : @code{density} and one output : @code{percent-burned}


    @br
    @br
    @br
    @img(src := Resource.img.example.fireScreen.file, stylesheet.center(50))
    @br


@h3{The simulation}

We would like to study the impact of the @i{density} factor for a fixed population size. To do this, let's
build a design of experiment where the @i{density} factor ranges from 20% to 80% by steps of 10.

@p Since the Fire model is stochastic, we are interested in doing replications for each instance of the
@i{density} factor. Results for each replication will be stored it in a @i{CSV} file.
In this example case, we will perform 10 replications per step. This stays a too small sample to draw up
any robust conclusion on this simple model, but we take this value here for the sake of illustration.
When designing your experiment, you will have to find a compromise between the precision on stochasticity and the number of parameter points explored.
More elaborated methods, in the case of a calibration of a stochastic model with a genetic algorithm for example, will automatically deal with this compromise (@i{link to GA calibration})

@p You can get the NetLogo implementation of the model
@a("here", href :=  Resource.script.fireNLogo.file).

@h3{The Design of Experiment}

We first need to define 2 OpenMOLE variables in order to repeat our experience 10 times for every step of the
@i{density} exploration. These 2 variables are:
@ul
  @li{an integer (Int) representing the seed of the random number generator for exploring the replications,}
  @li{a Double to set the value of @i{density}}

@br @hl.openmole(variables, name = "netlogo variables")

@p Given these variables, the definition of the exploration in OpenMOLE writes as follows:

@br @hl.openmole(exploration, header = variables, name = "netlogo exploration")

@p This design of experiment will generate 70 distinct sets of input values for the NetLogo model:
@ul
  @li{10 replications with 10 different seeds for @i{density} = 20%}
  @li{10 replications with 10 different seeds for @i{density} = 30%}
  @li{...}
  @li{10 replications with 10 different seeds for @i{density} = 80%}

@p We now need to compose this design of experiment in a complete workflow in order to run the 70 distinct
experiments.


@h3{Storing the results}

OpenMOLE usually delegates the tasks execution to many different computers. To gather the results of these remote
executions, we use a mechanism called @i{hooks}. Hooks can be assimilated to a listener that saves or display
results. They are more thoroughly described in a
@a("specific section of the documentation", href := DocumentationPages.hook.file).

@p Here we will create a hook to listen to the model executions and save the results in a CSV file at the end of
each of the 70 runs.

@br @hl.openmole(csvHook, header =
s"""
$variables
$exploration
$netlogo
""", name = "netlogo hook")

@h3{Bringing all the pieces together}

Now that we have defined each component, we can compose the workflow that brings all the pieces of the simulation
together:
@br @hl.openmole(s"""
$variables
$exploration
$netlogo
$csvHook

DirectSampling(
  evaluation = fireTask hook csvHook,
  sampling = sampling
)""", name = "netlogo full workflow")

@p At the end of the execution, you will find the output values in a file called @i{result.csv}.

@h3{Going further}

The Netlogo combines a GUI created by the user, in which he can define parameters and run functions, which the source code in itself.

Sometimes, you have to modify your code slightly to render it purely headless so that it can be run everywhere.

The way to proceed is explained in details in the @aa("Headless Netlogo", href := DocumentationPages.headlessNetLogo.file) section.
